relocate(NP, .after = PP) %>%
# Add row-wise TOTAL
rowwise() %>%
mutate(Total = sum(c_across(where(is.numeric)))) %>%
ungroup() %>%
# Add TOTAL row (column-wise sums)
bind_rows(summarise(., zone = "Total", across(where(is.numeric), sum))) %>%
mutate(zone = factor(zone, levels = c("Total", "Lowland river", "Lower foothill"           , "Upper foothill", "Mountain stream"))) %>% ## ggplot plots inverted factors!
arrange(zone)
epl18ab_sum_prpext <- epl18ab_sum_ext %>%
filter(zone != "Total") %>%
mutate(across(c(WP, MP, PP, NP), ~ round(.x / Total, 3))) %>%
select(zone, WP, MP, PP, NP)
View(epl18ab_sum_prpext)
# 2024 summaries
# make summary counts of EPL
epl24ab_sum <- riv_type_metrics %>%
group_by(EPL24_ab, zone) %>%
summarise(count = n(),.groups = 'drop') %>%
pivot_wider(names_from = EPL24_ab,
values_from = count, values_fill = 0) %>%
relocate(WP, .before = MP)%>%
relocate(NP, .after = PP) %>%
# Add row-wise TOTAL
rowwise() %>%
mutate(Total = sum(c_across(where(is.numeric)))) %>%
ungroup() %>%
# Add TOTAL row (column-wise sums)
bind_rows(summarise(., zone = "Total", across(where(is.numeric), sum))) %>%
# Add EPLindex
mutate(EPLI = ((WP*3)+(MP*2)+(PP*1)+(NP*0))/((WP+MP+PP+NP)*3)) %>%
mutate(zone = factor(zone, levels = c("Total", "Lowland river", "Lower foothill"           , "Upper foothill", "Mountain stream"))) %>% ## ggplot plots inverted factors!
arrange(zone)
# make summary of extent of EPL
epl24ab_sum_ext <- riv_type_metrics %>%
group_by(EPL24_ab, zone) %>%
summarise(length = round(sum(tot_leng18)/1000, 0),.groups = 'drop') %>%
pivot_wider(names_from = EPL24_ab,
values_from = length, values_fill = 0) %>%
relocate(WP, .before = MP)%>%
relocate(NP, .after = PP) %>%
# Add row-wise TOTAL
rowwise() %>%
mutate(Total = sum(c_across(where(is.numeric)))) %>%
ungroup() %>%
# Add TOTAL row (column-wise sums)
bind_rows(summarise(., zone = "Total", across(where(is.numeric), sum))) %>%
mutate(zone = factor(zone, levels = c("Total", "Lowland river", "Lower foothill"           , "Upper foothill", "Mountain stream"))) %>% ## ggplot plots inverted factors!
arrange(zone)
epl24ab_sum_prpext <- epl24ab_sum_ext %>%
filter(zone != "Total") %>%
mutate(across(c(WP, MP, PP, NP), ~ round(.x / Total, 3))) %>%
select(zone, WP, MP, PP, NP)
View(epl24ab_sum_prpext)
# Add packages:
library(sf)
library(tidyverse)
# Add data
pa <- st_read("C:/Users/skownoa/Dropbox/NBAwork/NLC_change/NLC_Change.gdb", layer = "SANBI_PA_2024Q4_Mar2025") #ensure it uses proj =  wgs84 aea cm 25 -24 -33
rivers <-st_read("C:/Users/skownoa/Dropbox/NBAwork/Rivers/NBA2025_rivers/NBA2025_River_20250610.shp") #ensure it uses proj =  wgs84 aea cm 25 -24 -33
# Data preparation:
# Subset PA data for 2018 and 2024 using DECL_YEAR, excluding properties degazetted using UNDECL_YEA. In preparation for this selection DECL_YEAR is set to 0 when unknown, and UNDCL_YEA is set to 9999 for those PAs that have never been degazetted.
# Create PA vectors for each time point
pa2018 <- subset(pa, DECL_YEAR <  2019 & UNDECL_YEA >2018)
pa2024 <- subset(pa, DECL_YEAR <  2025 & UNDECL_YEA >2024)
# Intersect PA with Rivers at each time point
pa18_riv <- st_intersection(rivers, pa2018)
pa18_riv <- pa18_riv %>%
mutate(leng = st_length(geometry)) %>%
st_drop_geometry() %>%
group_by(fid_1) %>%
summarise(leng_pa18 = sum((as.numeric(leng))))
pa24_riv <- st_intersection(rivers, pa2024)
pa24_riv <- pa24_riv %>%
mutate(leng = st_length(geometry)) %>%
st_drop_geometry() %>%
group_by(fid_1) %>%
summarise(leng_pa24 = sum((as.numeric(leng))))
# Join the PA length calculations to the Rivers data (using fid_1) and then group by River type and summarise by Condition class- clean up mismatched PES (Foreign, estuary and Data Defic)
riv <- rivers %>%
left_join(pa18_riv, by = "fid_1") %>%
left_join(pa24_riv, by = "fid_1") %>%
mutate(leng = as.numeric(st_length(geometry))) %>%
rename(PES2024 = NBA2025_PE) %>% # fix name of PES 2024
# clean up non SA type and remove estuaries and foreign segments
filter(RIVTYPE != "Foreign", PES2018 != "Foreign", PES2024 != "Foreign",
PES2018 != "Estuary",  PES2018 != "Estuary") %>%
# ensure consistency with Data defic segments
mutate(PES2018 = ifelse(PES2018 == "Data defic" & PES2024 != "Data defic", PES2024                          , PES2018)) %>%
# Drop geometry to work as a plain table
st_drop_geometry()
## Note these data extend outside of SA and into estuaries - these segements need to be filtered out when doing computations.
#summarise by River type including segment length per type per condition class - this allows for inclusion of condition in the EPL formula
options(scipen = 999)
#overall summary
riv_type_18 <- riv %>%
group_by(RIVTYPE, PES2018) %>%
summarise(leng = sum(as.numeric(leng), na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = PES2018, values_from = leng, values_fill = list(leng = 0))  %>%
mutate(tot_leng18 = rowSums(across(c(A, B, C, D, E, F, `Data defic`))))
riv_type_24 <- riv %>%
group_by(RIVTYPE, PES2024) %>%
summarise(leng = sum(as.numeric(leng), na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = PES2024, values_from = leng, values_fill = list(leng = 0))  %>%
mutate(tot_leng24 = rowSums(across(c(A, B, C, D, E, F, `Data defic`))))
# PA summary
riv_type_pa18 <- riv %>%
group_by(RIVTYPE, PES2018) %>%
summarise(leng_pa18 = sum(as.numeric(leng_pa18), na.rm = TRUE)) %>%
ungroup()  %>%
pivot_wider(names_from = PES2018, values_from = leng_pa18,values_fill = list(leng_pa18 = 0))  %>%
mutate(tot_pa18 = rowSums(across(c(A, B, C, D, E, F, `Data defic`))))
riv_type_pa24 <- riv %>%
group_by(RIVTYPE, PES2024) %>%
summarise(leng_pa24 = sum(as.numeric(leng_pa24), na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = PES2024, values_from = leng_pa24, values_fill = list(leng_pa24 = 0)) %>%
mutate(tot_pa24 = rowSums(across(c(A, B, C, D, E, F, `Data defic`))))
# Join the three tables above - this makes a single table in which all the required metric can be found to compute EPL and RLE
riv_type_metrics <- riv_type_18 %>%
select(RIVTYPE, tot_leng18) %>%
left_join(riv_type_pa18, by = "RIVTYPE") %>%
rename(A18=A, B18=B, C18=C, D18=D, E18=E, F18=F, DDef18 = `Data defic`) %>%
left_join(riv_type_pa24, by = "RIVTYPE") %>%
rename(DDef = `Data defic`) %>%
mutate(prp_pa18 = tot_pa18/tot_leng18) %>%
mutate(prp_pa18_ab = (A18 + B18 + DDef18)/tot_leng18) %>%
mutate(prp_pa18_model = (A18 + B18  + DDef18 + C18 + (0.5*D18) + (0.3*E18) + (0.1*F18))/tot_leng18) %>%
mutate(EPL18_all = case_when( prp_pa18 >= 0.2 ~ "WP",
prp_pa18 >= 0.1 ~ "MP",
prp_pa18 >= 0.01 ~ "PP",
TRUE ~ "NP")) %>%
mutate(EPL18_ab = case_when( prp_pa18_ab >= 0.2 ~ "WP",
prp_pa18_ab >= 0.1 ~ "MP",
prp_pa18_ab >= 0.01 ~ "PP",
TRUE ~ "NP")) %>%
mutate(EPL18_model = case_when( prp_pa18_model >= 0.2 ~ "WP",
prp_pa18_model >= 0.1 ~ "MP",
prp_pa18_model >= 0.01 ~ "PP",
TRUE ~ "NP")) %>%
mutate(prp_pa24 = tot_pa24/tot_leng18) %>%
mutate(prp_pa24_ab = (A + B + DDef)/tot_leng18) %>%
mutate(prp_pa24_model = (A + B  + DDef + (0.5*C) + (0.3*D) + (0.1*E))/tot_leng18) %>%
mutate(EPL24_all = case_when( prp_pa24 >= 0.2 ~ "WP",
prp_pa24 >= 0.1 ~ "MP",
prp_pa24 >= 0.01 ~ "PP",
TRUE ~ "NP")) %>%
mutate(EPL24_ab = case_when( prp_pa24_ab >= 0.2 ~ "WP",
prp_pa24_ab >= 0.1 ~ "MP",
prp_pa24_ab >= 0.01 ~ "PP",
TRUE ~ "NP")) %>%
mutate(EPL24_model = case_when( prp_pa24_model >= 0.2 ~ "WP",
prp_pa24_model >= 0.1 ~ "MP",
prp_pa24_model >= 0.01 ~ "PP",
TRUE ~ "NP")) %>%
# add in River Zones based on last letter of RIVTYPE
mutate(zone = case_when(str_ends(RIVTYPE, "U") ~ "Upper foothill",
str_ends(RIVTYPE, "L") ~ "Lower foothill",
str_ends(RIVTYPE, "F") ~ "Lowland river",
str_ends(RIVTYPE, "M") ~ "Mountain stream",
TRUE ~  "other"))
# 2018 summaries
# make summary counts of EPL categories per River Slopes Zones
epl18ab_sum <- riv_type_metrics %>%
group_by(EPL18_ab, zone) %>%
summarise(count = n(),.groups = 'drop') %>%
pivot_wider(names_from = EPL18_ab,
values_from = count, values_fill = 0) %>%
relocate(WP, .before = MP)%>%
relocate(NP, .after = PP) %>%
# Add row-wise TOTAL
rowwise() %>%
mutate(Total = sum(c_across(where(is.numeric)))) %>%
ungroup() %>%
# Add TOTAL row (column-wise sums)
bind_rows(summarise(., zone = "Total", across(where(is.numeric), sum))) %>%
# Add EPLindex
mutate(EPLI = ((WP*3)+(MP*2)+(PP*1)+(NP*0))/((WP+MP+PP+NP)*3)) %>%
mutate(zone = factor(zone, levels = c("Total", "Lowland river", "Lower foothill"           , "Upper foothill", "Mountain stream"))) %>% ## ggplot plots inverted factors!
arrange(zone)
# make summary of extent of EPL
epl18ab_sum_ext <- riv_type_metrics %>%
group_by(EPL18_ab, zone) %>%
summarise(length = round(sum(tot_leng18)/1000, 0),.groups = 'drop') %>%
pivot_wider(names_from = EPL18_ab,
values_from = length, values_fill = 0) %>%
relocate(WP, .before = MP)%>%
relocate(NP, .after = PP) %>%
# Add row-wise TOTAL
rowwise() %>%
mutate(Total = sum(c_across(where(is.numeric)))) %>%
ungroup() %>%
# Add TOTAL row (column-wise sums)
bind_rows(summarise(., zone = "Total", across(where(is.numeric), sum))) %>%
mutate(zone = factor(zone, levels = c("Total", "Lowland river", "Lower foothill"           , "Upper foothill", "Mountain stream"))) %>% ## ggplot plots inverted factors!
arrange(zone)
epl18ab_sum_prpext <- epl18ab_sum_ext %>%
filter(zone != "Total") %>%
mutate(across(c(WP, MP, PP, NP), ~ round(.x / Total, 3))) %>%
select(zone, WP, MP, PP, NP)
# 2024 summaries
# make summary counts of EPL
epl24ab_sum <- riv_type_metrics %>%
group_by(EPL24_ab, zone) %>%
summarise(count = n(),.groups = 'drop') %>%
pivot_wider(names_from = EPL24_ab,
values_from = count, values_fill = 0) %>%
relocate(WP, .before = MP)%>%
relocate(NP, .after = PP) %>%
# Add row-wise TOTAL
rowwise() %>%
mutate(Total = sum(c_across(where(is.numeric)))) %>%
ungroup() %>%
# Add TOTAL row (column-wise sums)
bind_rows(summarise(., zone = "Total", across(where(is.numeric), sum))) %>%
# Add EPLindex
mutate(EPLI = ((WP*3)+(MP*2)+(PP*1)+(NP*0))/((WP+MP+PP+NP)*3)) %>%
mutate(zone = factor(zone, levels = c("Total", "Lowland river", "Lower foothill"           , "Upper foothill", "Mountain stream"))) %>% ## ggplot plots inverted factors!
arrange(zone)
# make summary of extent of EPL
epl24ab_sum_ext <- riv_type_metrics %>%
group_by(EPL24_ab, zone) %>%
summarise(length = round(sum(tot_leng18)/1000, 0),.groups = 'drop') %>%
pivot_wider(names_from = EPL24_ab,
values_from = length, values_fill = 0) %>%
relocate(WP, .before = MP)%>%
relocate(NP, .after = PP) %>%
# Add row-wise TOTAL
rowwise() %>%
mutate(Total = sum(c_across(where(is.numeric)))) %>%
ungroup() %>%
# Add TOTAL row (column-wise sums)
bind_rows(summarise(., zone = "Total", across(where(is.numeric), sum))) %>%
mutate(zone = factor(zone, levels = c("Total", "Lowland river", "Lower foothill"           , "Upper foothill", "Mountain stream"))) %>% ## ggplot plots inverted factors!
arrange(zone)
epl24ab_sum_prpext <- epl24ab_sum_ext %>%
filter(zone != "Total") %>%
mutate(across(c(WP, MP, PP, NP), ~ round(.x / Total, 3))) %>%
select(zone, WP, MP, PP, NP)
View(epl24ab_sum_prpext)
View(epl24ab_sum_ext)
write.csv(epl18ab_sum, file = "outputs/epl18_riv_sum_count.csv")
write.csv(epl18ab_sum_ext, file = "outputs/epl18_riv_sum_ext.csv")
write.csv(epl18ab_sum_ext, file = "outputs/epl18_riv_sum_ext.csv")
write.csv(epl18ab_sum_prpext, file = "outputs/epl18_riv_sum_prp.csv")
# export a csv of results - COUNT of EPL 18 per slope zone
write.csv(epl24ab_sum, file = "outputs/epl24_riv_sum_count.csv")
# export a csv of results - EXTENT (km) of EPL 18 per slope zone
write.csv(epl24ab_sum_ext, file = "outputs/epl24_riv_sum_ext.csv")
# export a csv of results - PROPORTIONAL EXTENT  (km) of EPL 18 per slope zone
write.csv(epl24ab_sum_prpext, file = "outputs/epl24_riv_sum_prp.csv")
# load nbaR package : first run this in console devtools::install_github("SANBI-NBA/nbaR")
library(nbaR)
# Use NBA package to make EPL graph (need high res output for booklet)
EPL24count <- epl24ab_sum %>%
rename(`Well Protected` = WP,
`Moderately Protected` = MP,
`Poorly Protected` = PP,
`Not Protected` = NP ) # %>%
# select(-...1) # required if importing from CSV
epl24_bar_plot_count <- nba_plot(EPL24count,
`zone`,
2:5,
CHRT = "bar",
NUM = TRUE,
LAB = "Percentage of ecosystem types",
SAVE = NULL)
epl24_bar_plot_count
#export the graph
ggsave(
filename = "outputs/epl24_riv_bar_plot_count.jpeg", # File name
plot = epl24_bar_plot_count,                  # Plot object
device = "jpeg",                        # File format
width = 16, height = 12, units = "cm",   # Dimensions
dpi = 300                               # Resolution
)
# graphs for extent per slope zone per epl category
EPL24ext <- epl24ab_sum %>%
rename(`Well Protected` = WP,
`Moderately Protected` = MP,
`Poorly Protected` = PP,
`Not Protected` = NP ) # %>%
# select(-...1) # required if importing from CSV
epl24_bar_plot_ext <- nba_plot(EPL24ext,
`zone`,
2:5,
CHRT = "bar",
NUM = TRUE,
#LAB = "Percentage of ecosystem extent",
SAVE = NULL)
epl24_bar_plot_ext
#export the graph
ggsave(
filename = "outputs/epl24_riv_bar_plot_ext.jpeg", # File name
plot = epl24_bar_plot_ext,                   # Plot object
device = "jpeg",                        # File format
width = 16, height = 12, units = "cm",   # Dimensions
dpi = 300                               # Resolution
)
# Make a line plot of EPL Index using 2018 and 2014 timepoints - request Natasha to impve this or add to package.
EPLI <- epl24ab_sum %>%
select(zone, EPLI) %>%
rename(EPLI24 = EPLI) %>%
left_join(epl18ab_sum, by ="zone") %>%
rename(EPLI18 = EPLI) %>%
rename(Zone = zone) %>%
select(Zone,EPLI18, EPLI24) %>%
pivot_longer(cols = c(2,3), names_to = "Year", values_to = "EPLI") %>%
mutate(Year = case_when(
Year == "EPLI18" ~ "2018",
Year == "EPLI24" ~ "2024",
TRUE ~ Year
))
epli_line_plot <- ggplot(EPLI, aes(x = Year, y = EPLI, group = Zone)) +
geom_line(aes(linetype = Zone, color = Zone), linewidth = 1.2) +
geom_point(aes(color = Zone), size = 2) +
theme_minimal() +
labs(x = "Year", y = "EPLI") +
scale_x_discrete(limits = c("2018", "2024")) +
scale_color_manual(values = c(
"Mountain stream" = "black",
"Upper foothill" = "black",
"Lower foothill" = "grey40",
"Lowland river" = "grey40",
"Total" = "black"
)) +
scale_linetype_manual(values = c(
"Mountain stream" = "dotted",
"Upper foothill" = "dashed",
"Lower foothill" = "dashed",
"Lowland river" = "longdash",
"Total" = "solid"
)) +
theme(legend.title = element_blank())
epli_line_plot
#export the graph
ggsave(
filename = "outputs/epli_riv_line_plot.jpeg", # File name
plot = epli_line_plot,                   # Plot object
device = "jpeg",                        # File format
width = 16, height = 12, units = "cm",   # Dimensions
dpi = 300                               # Resolution
)
EPL24ext <- epl24ab_sum_ext %>%
rename(`Well Protected` = WP,
`Moderately Protected` = MP,
`Poorly Protected` = PP,
`Not Protected` = NP ) # %>%
epl24_bar_plot_ext <- nba_plot(EPL24ext,
`zone`,
2:5,
CHRT = "bar",
NUM = TRUE,
#LAB = "Percentage of ecosystem extent",
SAVE = NULL)
epl24_bar_plot_ext <- nba_plot(EPL24ext,
`zone`,
2:5,
CHRT = "bar",
NUM = TRUE,
LAB = "Percentage of ecosystem extent",
SAVE = NULL)
epl24_bar_plot_ext
epl24_bar_plot_ext <- nba_plot(EPL24ext,
`zone`,
2:5,
CHRT = "bar",
NUM = FALSE,
LAB = "Percentage of ecosystem extent",
SAVE = NULL)
epl24_bar_plot_ext
#export the graph
ggsave(
filename = "outputs/epl24_riv_bar_plot_ext.jpeg", # File name
plot = epl24_bar_plot_ext,                   # Plot object
device = "jpeg",                        # File format
width = 16, height = 12, units = "cm",   # Dimensions
dpi = 300                               # Resolution
)
epli_line_plot <- ggplot(EPLI, aes(x = Year, y = EPLI, group = Zone)) +
geom_line(aes(linetype = Zone, color = Zone), linewidth = 1.2) +
geom_point(aes(color = Zone), size = 2) +
theme_minimal() +
labs(x = "Year", y = "EPLI") +
scale_x_discrete(limits = c("2018", "2024")) +
scale_color_manual(values = c(
"Total" = "black",
"Lowland river" = "grey40",
"Lower foothill" = "grey40",
"Upper foothill" = "black",
"Mountain stream" = "black"
)) +
scale_linetype_manual(values = c(
"Total" = "solid",
"Lowland river" = "longdash",
"Lower foothill" = "dashed",
"Upper foothill" = "dashed",
"Mountain stream" = "dotted"
)) +
theme(legend.title = element_blank())
epli_line_plot
epli_line_plot <- ggplot(EPLI, aes(x = Year, y = EPLI, group = Zone)) +
geom_line(aes(linetype = Zone, color = Zone), linewidth = 1.2) +
geom_point(aes(color = Zone), size = 2) +
theme_minimal() +
labs(x = "Year", y = "EPLI") +
scale_x_discrete(limits = c("2018", "2024")) +
scale_color_manual(values = c(
"Total" = "black",
"Lowland river" = "grey40",
"Lower foothill" = "grey40",
"Upper foothill" = "black",
"Mountain stream" = "black"
)) +
scale_linetype_manual(values = c(
"Total" = "solid",
"Lowland river" = "longdash",
"Lower foothill" = "dashed",
"Upper foothill" = "dashed",
"Mountain stream" = "dotted"
)) +
guides(color = guide_legend(reverse = TRUE),
linetype = guide_legend(reverse = TRUE)) +
theme(legend.title = element_blank())
epli_line_plot
epli_line_plot <- ggplot(EPLI, aes(x = Year, y = EPLI, group = Zone)) +
geom_line(aes(linetype = Zone, color = Zone), linewidth = 1.2) +
geom_point(aes(color = Zone), size = 2) +
theme_minimal() +
labs(x = "Year", y = "EPLI") +
scale_x_discrete(limits = c("2018", "2024")) +
scale_color_manual(values = c(
"Total" = "black",
"Lowland river" = "grey40",
"Lower foothill" = "grey40",
"Upper foothill" = "black",
"Mountain stream" = "black"
)) +
scale_linetype_manual(values = c(
"Total" = "solid",
"Lowland river" = "dotdash",
"Lower foothill" = "dashed",
"Upper foothill" = "dashed",
"Mountain stream" = "dotted"
)) +
guides(color = guide_legend(reverse = TRUE),
linetype = guide_legend(reverse = TRUE)) +
theme(legend.title = element_blank())
epli_line_plot
epli_line_plot <- ggplot(EPLI, aes(x = Year, y = EPLI, group = Zone)) +
geom_line(aes(linetype = Zone, color = Zone), linewidth = 1.2) +
geom_point(aes(color = Zone), size = 2) +
theme_minimal() +
labs(x = "Year", y = "EPLI") +
scale_x_discrete(limits = c("2018", "2024")) +
scale_color_manual(values = c(
"Total" = "black",
"Lowland river" = "grey40",
"Lower foothill" = "grey40",
"Upper foothill" = "black",
"Mountain stream" = "black"
)) +
scale_linetype_manual(values = c(
"Total" = "solid",
"Lowland river" = "dotdash",
"Lower foothill" = "dashed",
"Upper foothill" = "dashed",
"Mountain stream" = "dotted"
)) +
coord_cartesian(ylim = c(0.1, 0.5)) +
guides(color = guide_legend(reverse = TRUE),
linetype = guide_legend(reverse = TRUE)) +
theme(legend.title = element_blank())
epli_line_plot
epli_line_plot <- ggplot(EPLI, aes(x = Year, y = EPLI, group = Zone)) +
geom_line(aes(linetype = Zone, color = Zone), linewidth = 1.2) +
geom_point(aes(color = Zone), size = 2) +
theme_minimal() +
labs(x = "Year", y = "EPLI") +
scale_x_discrete(limits = c("2018", "2024")) +
scale_color_manual(values = c(
"Total" = "black",
"Lowland river" = "blue",
"Lower foothill" = "darkgreen",
"Upper foothill" = "brown",
"Mountain stream" = "orange"
)) +
#  scale_linetype_manual(values = c(
#   "Total" = "solid",
#   "Lowland river" = "dotdash",
#   "Lower foothill" = "dashed",
#   "Upper foothill" = "dashed",
#   "Mountain stream" = "dotted"
# )) +
coord_cartesian(ylim = c(0.1, 0.5)) +
guides(color = guide_legend(reverse = TRUE),
linetype = guide_legend(reverse = TRUE)) +
theme(legend.title = element_blank())
epli_line_plot
#export the graph
ggsave(
filename = "outputs/epli_riv_line_plot.jpeg", # File name
plot = epli_line_plot,                   # Plot object
device = "jpeg",                        # File format
width = 16, height = 12, units = "cm",   # Dimensions
dpi = 300                               # Resolution
)
# export a csv of results - Condition and EPL per river type 2018 and 2024
write.csv(riv_type_metrics, file = "outputs/epl_riv_metrics_per_type.csv")
View(riv_type_metrics)
