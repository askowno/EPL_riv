View(riv_type)
View(riv_type)
View(riv_type)
View(riv)
riv_type <- riv %>%
group_by(RIVTYPE) %>%
summarise(leng_tot = sum(as.numeric(leng)))
View(riv_type)
riv <-st_read("C:/Users/skownoa/Dropbox/NBAwork/Rivers/NBA2025_rivers/NBA2025_River_20250610.shp") #ensure it uses proj =  wgs84 aea cm 25 -24 -33
riv <- riv %>%
left_join(pa18_riv, by = "fid_1") %>%
left_join(pa24_riv, by = "fid_1") %>%
mutate(leng = as.numeric(st_length(geometry)))
riv_type <- riv %>%
group_by(RIVTYPE) %>%
summarise(leng_tot = sum(as.numeric(leng)))
View(riv_type)
riv_type <- riv %>%
st_drop_geometry() %>%             # Drop geometry to work as a plain table
group_by(RIVTYPE, PES2018) %>%
summarise(leng = sum(as.numeric(leng), na.rm = TRUE))
View(riv_type)
View(riv)
riv_type <- riv %>%
st_drop_geometry() %>%             # Drop geometry to work as a plain table
group_by(RIVTYPE, PES2018, NBA2025_PE) %>%
summarise(leng = sum(as.numeric(leng), na.rm = TRUE))
# 2018 PA summary
riv_type_pa18 <- riv %>%
st_drop_geometry() %>%             # Drop geometry to work as a plain table
group_by(RIVTYPE, PES2018) %>%
summarise(leng_pa18 = sum(as.numeric(leng_pa18), na.rm = TRUE))
# 2024 PA summary
riv_type_pa24 <- riv %>%
st_drop_geometry() %>%             # Drop geometry to work as a plain table
group_by(RIVTYPE, NBA2025_PE) %>%
summarise(leng_pa24 = sum(as.numeric(leng_pa24), na.rm = TRUE))
View(riv_type)
View(riv_type_pa18)
View(riv_type_pa24)
# 2024 PA summary
riv_type_pa24 <- riv %>%
st_drop_geometry() %>%             # Drop geometry to work as a plain table
group_by(RIVTYPE, NBA2025_PE) %>%
summarise(leng_pa24 = sum(as.numeric(leng_pa24), na.rm = TRUE)) %>%
rename(PES2024 = NBA2025_PE)
# 2024 PA summary
riv_type_pa24 <- riv %>%
st_drop_geometry() %>%
group_by(RIVTYPE, PES2024) %>%
summarise(leng_pa24 = sum(as.numeric(leng_pa24), na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(
names_from = PES2024,
values_from = leng_pa24,
names_glue = "{PES2024}_2024"
)
# 2024 PA summary
riv_type_pa24 <- riv %>%
st_drop_geometry() %>%
group_by(RIVTYPE, NBA2025_PE) %>%
rename(PES2024 = NBA2025_PE) %>%
summarise(leng_pa24 = sum(as.numeric(leng_pa24), na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(
names_from = PES2024,
values_from = leng_pa24,
names_glue = "{PES2024}_2024"
)
# 2018 PA summary
riv_type_pa18 <- riv %>%
st_drop_geometry() %>%
group_by(RIVTYPE, PES2018) %>%
summarise(leng_pa18 = sum(as.numeric(leng_pa18), na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(
names_from = PES2018,
values_from = leng_pa18,
names_glue = "{PES2018}_2018"
)
riv <- riv %>%
left_join(pa18_riv, by = "fid_1") %>%
left_join(pa24_riv, by = "fid_1") %>%
mutate(leng = as.numeric(st_length(geometry))) %>%
filter(RIVTYPE != "Foreign")
View(riv)
# Intersect PA with Rivers at each time point
pa18_riv <- st_intersection(riv, pa2018)
pa18_riv <- pa18_riv %>%
mutate(leng = st_length(geometry)) %>%
st_drop_geometry() %>%
group_by(fid_1) %>%
summarise(leng_pa18 = sum((as.numeric(leng))))
pa24_riv <- st_intersection(riv, pa2024)
pa24_riv <- pa24_riv %>%
mutate(leng = st_length(geometry)) %>%
st_drop_geometry() %>%
group_by(fid_1) %>%
summarise(leng_pa24 = sum((as.numeric(leng))))
# Join the PA length calculations to the Rivers data (using fid_1) and then group by River type and summarise by Condition class
riv <- riv %>%
left_join(pa18_riv, by = "fid_1") %>%
left_join(pa24_riv, by = "fid_1") %>%
mutate(leng = as.numeric(st_length(geometry))) %>%
filter(RIVTYPE != "Foreign")
# Note these data extend outside of SA and into estuaries - these segements need to be filtered out when doing computations.
#summarise by River type including segment length per type per condition class - this allows for inclusion of condition in the EPL formula
#overall summary
riv_type <- riv %>%
st_drop_geometry() %>%             # Drop geometry to work as a plain table
group_by(RIVTYPE, PES2018, NBA2025_PE) %>%
summarise(leng = sum(as.numeric(leng), na.rm = TRUE))
# 2018 PA summary
riv_type_pa18 <- riv %>%
st_drop_geometry() %>%
group_by(RIVTYPE, PES2018) %>%
summarise(leng_pa18 = sum(as.numeric(leng_pa18), na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(
names_from = PES2018,
values_from = leng_pa18,
names_glue = "{PES2018}_2018"
)
# 2024 PA summary
riv_type_pa24 <- riv %>%
st_drop_geometry() %>%
group_by(RIVTYPE, NBA2025_PE) %>%
rename(PES2024 = NBA2025_PE) %>%
summarise(leng_pa24 = sum(as.numeric(leng_pa24), na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(
names_from = PES2024,
values_from = leng_pa24,
names_glue = "{PES2024}_2024"
)
# Join the three tables above - this makes a single table in which all the required metric can be found to compute EPL and RLE
riv_type_metrics <- riv_type %>%
left_join(riv_type_pa18, by = "RIVTYPE") %>%
left_join(riv_type_pa24, by = "RIVTYPE")
View(riv_type_metrics)
View(riv_type)
View(riv)
rivers <-st_read("C:/Users/skownoa/Dropbox/NBAwork/Rivers/NBA2025_rivers/NBA2025_River_20250610.shp") #ensure it uses proj =  wgs84 aea cm 25 -24 -33
riv <- rivers %>%
left_join(pa18_riv, by = "fid_1") %>%
left_join(pa24_riv, by = "fid_1") %>%
mutate(leng = as.numeric(st_length(geometry))) %>%
rename(PES2024 = NBA2025_PE) %>% # fix name of PES 2024
filter(RIVTYPE != "Foreign") %>%   # clean up non SA types
mutate(PES2018 = ifelse(PES2018 != "Foreign" & PES2024 == "Foreign", PES2024))
riv <- rivers %>%
left_join(pa18_riv, by = "fid_1") %>%
left_join(pa24_riv, by = "fid_1") %>%
mutate(leng = as.numeric(st_length(geometry))) %>%
rename(PES2024 = NBA2025_PE) %>% # fix name of PES 2024
filter(RIVTYPE != "Foreign") %>%   # clean up non SA types
mutate(PES2018 = ifelse(PES2018 != "Foreign" & PES2024 == "Foreign", PES2024, PES2018))
riv <- rivers %>%
left_join(pa18_riv, by = "fid_1") %>%
left_join(pa24_riv, by = "fid_1") %>%
mutate(leng = as.numeric(st_length(geometry))) %>%
rename(PES2024 = NBA2025_PE) %>% # fix name of PES 2024
filter(RIVTYPE != "Foreign") %>%   # clean up non SA types
mutate(PES2018 = ifelse(PES2018 != "Foreign" & PES2024 == "Foreign", PES2024,                        PES2018))  %>%  # ensure consistency with foreign segments
mutate(PES2018 = ifelse(PES2018 != "Data defic" & PES2024 != "Data defic", PES2024, PES2018))  %>%  # ensure consistency with Data defic segments
# Note these data extend outside of SA and into estuaries - these segements need to be filtered out when doing computations.
#summarise by River type including segment length per type per condition class - this allows for inclusion of condition in the EPL formula
#overall summary
riv_type <- riv %>%
st_drop_geometry() %>%             # Drop geometry to work as a plain table
group_by(RIVTYPE, PES2018, NBA2025_PE) %>%
summarise(leng = sum(as.numeric(leng), na.rm = TRUE)) %>%
ungroup()
#overall summary
riv_type <- riv %>%
st_drop_geometry() %>%             # Drop geometry to work as a plain table
group_by(RIVTYPE, PES2018, PES2024) %>%
summarise(leng = sum(as.numeric(leng), na.rm = TRUE)) %>%
ungroup()
#overall summary
riv_type <- riv %>%
st_drop_geometry() %>%             # Drop geometry to work as a plain table
group_by(RIVTYPE, PES2018, PES2024) %>%
summarise(leng = sum(as.numeric(leng), na.rm = TRUE)) %>%
ungroup()
View(riv_type)
riv <- rivers %>%
left_join(pa18_riv, by = "fid_1") %>%
left_join(pa24_riv, by = "fid_1") %>%
mutate(leng = as.numeric(st_length(geometry))) %>%
rename(PES2024 = NBA2025_PE) %>% # fix name of PES 2024
filter(RIVTYPE != "Foreign") %>%   # clean up non SA types
mutate(PES2018 = ifelse(PES2018 != "Foreign" & PES2024 == "Foreign", PES2024,                        PES2018))  %>%  # ensure consistency with foreign segments
mutate(PES2018 = ifelse(PES2018 == "Data defic" & PES2024 != "Data defic", PES2024, PES2018))   # ensure consistency with Data defic segments
#overall summary
riv_type <- riv %>%
st_drop_geometry() %>%             # Drop geometry to work as a plain table
group_by(RIVTYPE, PES2018, PES2024) %>%
summarise(leng = sum(as.numeric(leng), na.rm = TRUE)) %>%
ungroup()
riv <- rivers %>%
left_join(pa18_riv, by = "fid_1") %>%
left_join(pa24_riv, by = "fid_1") %>%
mutate(leng = as.numeric(st_length(geometry))) %>%
rename(PES2024 = NBA2025_PE) %>% # fix name of PES 2024
filter(RIVTYPE != "Foreign") %>%   # clean up non SA types
mutate(PES2018 = ifelse(PES2018 != "Foreign" & PES2024 == "Foreign", PES2024,                        PES2018))  %>%  # ensure consistency with foreign segments
mutate(PES2018 = ifelse(PES2018 == "Data defic" & PES2024 != "Data defic", PES2024                    , PES2018)) %>%  # ensure consistency with Data defic segments
mutate(PES2018 = ifelse(PES2018 == "Estuary" & PES2024 != "Estuary", PES2024                    , PES2018))  %>% # ensure consistency with Estuary segments
mutate(PES2018 = ifelse(PES2018 != "Estuary" & PES2024 == "Estuary", PES2024                    , PES2018)) # ensure consistency with Estuary segments
#overall summary
riv_type <- riv %>%
st_drop_geometry() %>%             # Drop geometry to work as a plain table
group_by(RIVTYPE, PES2018, PES2024) %>%
summarise(leng = sum(as.numeric(leng), na.rm = TRUE)) %>%
ungroup()
View(riv_type)
riv <- rivers %>%
left_join(pa18_riv, by = "fid_1") %>%
left_join(pa24_riv, by = "fid_1") %>%
mutate(leng = as.numeric(st_length(geometry))) %>%
rename(PES2024 = NBA2025_PE) %>% # fix name of PES 2024
filter(RIVTYPE != "Foreign") %>%   # clean up non SA types
mutate(PES2018 = ifelse(PES2018 != "Foreign" & PES2024 == "Foreign", PES2024,                        PES2018))  %>%  # ensure consistency with foreign segments
mutate(PES2018 = ifelse(PES2018 == "Foreign" & PES2024 != "Foreign", PES2024,                        PES2018))  %>%  # ensure consistency with foreign segments
mutate(PES2018 = ifelse(PES2018 == "Data defic" & PES2024 != "Data defic", PES2024                    , PES2018)) %>%  # ensure consistency with Data defic segments
mutate(PES2018 = ifelse(PES2018 == "Estuary" & PES2024 != "Estuary", PES2024                    , PES2018))  %>% # ensure consistency with Estuary segments
mutate(PES2018 = ifelse(PES2018 != "Estuary" & PES2024 == "Estuary", PES2024                    , PES2018)) # ensure consistency with Estuary segments
#overall summary
riv_type <- riv %>%
st_drop_geometry() %>%             # Drop geometry to work as a plain table
group_by(RIVTYPE, PES2018, PES2024) %>%
summarise(leng = sum(as.numeric(leng), na.rm = TRUE)) %>%
ungroup()
View(riv_type)
# 2018 PA summary
riv_type_pa18 <- riv %>%
st_drop_geometry() %>%
group_by(RIVTYPE, PES2018) %>%
summarise(leng_pa18 = sum(as.numeric(leng_pa18), na.rm = TRUE)) %>%
ungroup() %>%
# 2024 PA summary
riv_type_pa24 <- riv %>%
st_drop_geometry() %>%
group_by(RIVTYPE, PES2024) %>%
summarise(leng_pa24 = sum(as.numeric(leng_pa24), na.rm = TRUE)) %>%
ungroup() %>%
# Join the three tables above - this makes a single table in which all the required metric can be found to compute EPL and RLE
riv_type_metrics <- riv_type %>%
left_join(riv_type_pa18, by = "RIVTYPE") %>%
left_join(riv_type_pa24, by = "RIVTYPE")
# 2018 PA summary
riv_type_pa18 <- riv %>%
st_drop_geometry() %>%
group_by(RIVTYPE, PES2018) %>%
summarise(leng_pa18 = sum(as.numeric(leng_pa18), na.rm = TRUE)) %>%
ungroup()
riv_type_pa18 <- riv %>%
st_drop_geometry() %>%
group_by(RIVTYPE, PES2018) %>%
summarise(leng_pa18 = sum(as.numeric(leng_pa18), na.rm = TRUE)) %>%
ungroup()
# 2024 PA summary
riv_type_pa24 <- riv %>%
st_drop_geometry() %>%
group_by(RIVTYPE, PES2024) %>%
summarise(leng_pa24 = sum(as.numeric(leng_pa24), na.rm = TRUE)) %>%
ungroup()
View(riv_type_pa18)
riv_type_metrics <- riv_type %>%
left_join(riv_type_pa18, by = c("RIVTYPE", "PES2018")) %>%
left_join(riv_type_pa24, by = c("RIVTYPE", "PES2024"))
View(riv_type_metrics)
View(riv_type_pa24)
riv_type_metrics <- riv_type %>%
left_join(riv_type_pa18, by = c("RIVTYPE", "PES2018")
View(riv_type_metrics)
View(riv_type_metrics)
View(riv_type)
View(riv_type_metrics)
#summarise by River type including segment length per type per condition class - this allows for inclusion of condition in the EPL formula
options(scipen = 999)
riv_type <- riv %>%
st_drop_geometry() %>%    # Drop geometry to work as a plain table
group_by(RIVTYPE, PES2018, PES2024) %>%
summarise(leng = sum(as.numeric(leng), na.rm = TRUE)) %>%
ungroup()
# 2018 PA summary
riv_type_pa18 <- riv %>%
st_drop_geometry() %>%
group_by(RIVTYPE, PES2018) %>%
summarise(leng_pa18 = sum(as.numeric(leng_pa18), na.rm = TRUE)) %>%
ungroup()
# 2024 PA summary
riv_type_pa24 <- riv %>%
st_drop_geometry() %>%
group_by(RIVTYPE, PES2024) %>%
summarise(leng_pa24 = sum(as.numeric(leng_pa24), na.rm = TRUE)) %>%
ungroup()
# Join the three tables above - this makes a single table in which all the required metric can be found to compute EPL and RLE
riv_type_metrics <- riv_type %>%
left_join(riv_type_pa18, by = c("RIVTYPE", "PES2018")) %>%
left_join(riv_type_pa24, by = c("RIVTYPE", "PES2024"))
View(riv_type_metrics)
View(riv_type_metrics)
# Add packages:
library(sf)
library(tidyverse)
# Add data
pa <- st_read("C:/Users/skownoa/Dropbox/NBAwork/NLC_change/NLC_Change.gdb", layer = "SANBI_PA_2024Q4_Mar2025") #ensure it uses proj =  wgs84 aea cm 25 -24 -33
rivers <-st_read("C:/Users/skownoa/Dropbox/NBAwork/Rivers/NBA2025_rivers/NBA2025_River_20250610.shp") #ensure it uses proj =  wgs84 aea cm 25 -24 -33
# Data preparation:
# Subset PA data for 2018 and 2024 using DECL_YEAR, excluding properties degazetted using UNDECL_YEA. In preparation for this selection DECL_YEAR is set to 0 when unknown, and UNDCL_YEA is set to 9999 for those PAs that have never been degazetted.
# Create PA vectors for each time point
pa2018 <- subset(pa, DECL_YEAR <  2019 & UNDECL_YEA >2018)
pa2024 <- subset(pa, DECL_YEAR <  2025 & UNDECL_YEA >2024)
# Intersect PA with Rivers at each time point
pa18_riv <- st_intersection(rivers, pa2018)
pa18_riv <- pa18_riv %>%
mutate(leng = st_length(geometry)) %>%
st_drop_geometry() %>%
group_by(fid_1) %>%
summarise(leng_pa18 = sum((as.numeric(leng))))
pa24_riv <- st_intersection(rivers, pa2024)
pa24_riv <- pa24_riv %>%
mutate(leng = st_length(geometry)) %>%
st_drop_geometry() %>%
group_by(fid_1) %>%
summarise(leng_pa24 = sum((as.numeric(leng))))
# Join the PA length calculations to the Rivers data (using fid_1) and then group by River type and summarise by Condition class- clean up mismatched PES (Foreign, estuary and Data Defic)
riv <- rivers %>%
left_join(pa18_riv, by = "fid_1") %>%
left_join(pa24_riv, by = "fid_1") %>%
mutate(leng = as.numeric(st_length(geometry))) %>%
rename(PES2024 = NBA2025_PE) %>% # fix name of PES 2024
filter(RIVTYPE != "Foreign") %>%   # clean up non SA types
mutate(PES2018 = ifelse(PES2018 != "Foreign" & PES2024 == "Foreign", PES2024,                        PES2018))  %>%  # ensure consistency with foreign segments
mutate(PES2018 = ifelse(PES2018 == "Foreign" & PES2024 != "Foreign", PES2024,                        PES2018))  %>%  # ensure consistency with foreign segments
mutate(PES2018 = ifelse(PES2018 == "Data defic" & PES2024 != "Data defic", PES2024                    , PES2018)) %>%  # ensure consistency with Data defic segments
mutate(PES2018 = ifelse(PES2018 == "Estuary" & PES2024 != "Estuary", PES2024                    , PES2018))  %>% # ensure consistency with Estuary segments
mutate(PES2018 = ifelse(PES2018 != "Estuary" & PES2024 == "Estuary", PES2024                    , PES2018)) # ensure consistency with Estuary segments
## Note these data extend outside of SA and into estuaries - these segements need to be filtered out when doing computations.
View(riv)
#overall summary
riv_type_18 <- riv %>%
st_drop_geometry() %>%    # Drop geometry to work as a plain table
group_by(RIVTYPE, PES2018) %>%
summarise(leng = sum(as.numeric(leng), na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = PES2018, values from = leng)
#overall summary
riv_type_18 <- riv %>%
st_drop_geometry() %>%    # Drop geometry to work as a plain table
group_by(RIVTYPE, PES2018) %>%
summarise(leng = sum(as.numeric(leng), na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = PES2018, values_from = leng)
View(riv_type_18)
riv_type_24 <- riv %>%
st_drop_geometry() %>%    # Drop geometry to work as a plain table
group_by(RIVTYPE, PES2024) %>%
summarise(leng = sum(as.numeric(leng), na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = PES2024, values_from = leng)
# PA summary
riv_type_pa18 <- riv %>%
st_drop_geometry() %>%
group_by(RIVTYPE, PES2018) %>%
summarise(leng_pa18 = sum(as.numeric(leng_pa18), na.rm = TRUE)) %>%
ungroup()  %>%
pivot_wider(names_from = PES2018, values_from = leng_pa18)
riv_type_pa24 <- riv %>%
st_drop_geometry() %>%
group_by(RIVTYPE, PES2024) %>%
summarise(leng_pa24 = sum(as.numeric(leng_pa24), na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = PES2024, values_from = leng_pa24)
View(riv_type_18)
View(riv_type_24)
View(riv_type_pa18)
View(riv_type_pa24)
#overall summary
riv_type_18 <- riv %>%
st_drop_geometry() %>%    # Drop geometry to work as a plain table
group_by(RIVTYPE, PES2018) %>%
summarise(leng = sum(as.numeric(leng), na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = PES2018, values_from = leng, values_fill = list(leng = 0))
#overall summary
riv_type_18 <- riv %>%
st_drop_geometry() %>%    # Drop geometry to work as a plain table
group_by(RIVTYPE, PES2018) %>%
summarise(leng = sum(as.numeric(leng), na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = PES2018, values_from = leng, values_fill = list(leng = 0))
riv_type_24 <- riv %>%
st_drop_geometry() %>%    # Drop geometry to work as a plain table
group_by(RIVTYPE, PES2024) %>%
summarise(leng = sum(as.numeric(leng), na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = PES2024, values_from = leng, values_fill = list(leng = 0))
# PA summary
riv_type_pa18 <- riv %>%
st_drop_geometry() %>%
group_by(RIVTYPE, PES2018) %>%
summarise(leng_pa18 = sum(as.numeric(leng_pa18), na.rm = TRUE)) %>%
ungroup()  %>%
pivot_wider(names_from = PES2018, values_from = leng_pa18,values_fill = list(leng = 0))
riv_type_pa24 <- riv %>%
st_drop_geometry() %>%
group_by(RIVTYPE, PES2024) %>%
summarise(leng_pa24 = sum(as.numeric(leng_pa24), na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = PES2024, values_from = leng_pa24,values_fill = list(leng = 0))
# PA summary
riv_type_pa18 <- riv %>%
st_drop_geometry() %>%
group_by(RIVTYPE, PES2018) %>%
summarise(leng_pa18 = sum(as.numeric(leng_pa18), na.rm = TRUE)) %>%
ungroup()  %>%
pivot_wider(names_from = PES2018, values_from = leng_pa18,values_fill = list(leng = 0))
riv_type_pa24 <- riv %>%
st_drop_geometry() %>%
group_by(RIVTYPE, PES2024) %>%
summarise(leng_pa24 = sum(as.numeric(leng_pa24), na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = PES2024, values_from = leng_pa24,values_fill = list(leng = 0))
View(riv_type_pa24)
# PA summary
riv_type_pa18 <- riv %>%
st_drop_geometry() %>%
group_by(RIVTYPE, PES2018) %>%
summarise(leng_pa18 = sum(as.numeric(leng_pa18), na.rm = TRUE)) %>%
ungroup()  %>%
pivot_wider(names_from = PES2018, values_from = leng_pa18,values_fill = list(leng_pa18 = 0))
riv_type_pa24 <- riv %>%
st_drop_geometry() %>%
group_by(RIVTYPE, PES2024) %>%
summarise(leng_pa24 = sum(as.numeric(leng_pa24), na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = PES2024, values_from = leng_pa24, values_fill = list(leng_pa24 = 0))
View(riv_type_18)
#overall summary
riv_type_18 <- riv %>%
st_drop_geometry() %>%    # Drop geometry to work as a plain table
group_by(RIVTYPE, PES2018) %>%
summarise(leng = sum(as.numeric(leng), na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = PES2018, values_from = leng, values_fill = list(leng = 0))  %>%
mutate(tot_leng18 = sum(A, B, C, D, E, F, `Data defic`))
View(riv_type_18)
#overall summary
riv_type_18 <- riv %>%
st_drop_geometry() %>%    # Drop geometry to work as a plain table
group_by(RIVTYPE, PES2018) %>%
summarise(leng = sum(as.numeric(leng), na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = PES2018, values_from = leng, values_fill = list(leng = 0))  %>%
mutate(tot_leng18 = rowSums(across(c(A, B, C, D, E, F, `Data defic`))))
View(riv_type_18)
#overall summary
riv_type_18 <- riv %>%
st_drop_geometry() %>%    # Drop geometry to work as a plain table
group_by(RIVTYPE, PES2018) %>%
summarise(leng = sum(as.numeric(leng), na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = PES2018, values_from = leng, values_fill = list(leng = 0))  %>%
mutate(tot_leng18 = rowSums(across(c(A, B, C, D, E, F, `Data defic`))))
riv_type_24 <- riv %>%
st_drop_geometry() %>%    # Drop geometry to work as a plain table
group_by(RIVTYPE, PES2024) %>%
summarise(leng = sum(as.numeric(leng), na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = PES2024, values_from = leng, values_fill = list(leng = 0))  %>%
mutate(tot_leng24 = rowSums(across(c(A, B, C, D, E, F, `Data defic`))))
# PA summary
riv_type_pa18 <- riv %>%
st_drop_geometry() %>%
group_by(RIVTYPE, PES2018) %>%
summarise(leng_pa18 = sum(as.numeric(leng_pa18), na.rm = TRUE)) %>%
ungroup()  %>%
pivot_wider(names_from = PES2018, values_from = leng_pa18,values_fill = list(leng_pa18 = 0))  %>%
mutate(tot_pa18 = rowSums(across(c(A, B, C, D, E, F, `Data defic`))))
riv_type_pa24 <- riv %>%
st_drop_geometry() %>%
group_by(RIVTYPE, PES2024) %>%
summarise(leng_pa24 = sum(as.numeric(leng_pa24), na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = PES2024, values_from = leng_pa24, values_fill = list(leng_pa24 = 0)) %>%
mutate(tot_pa18 = rowSums(across(c(A, B, C, D, E, F, `Data defic`))))
View(riv_type_pa24)
riv_type_pa24 <- riv %>%
st_drop_geometry() %>%
group_by(RIVTYPE, PES2024) %>%
summarise(leng_pa24 = sum(as.numeric(leng_pa24), na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = PES2024, values_from = leng_pa24, values_fill = list(leng_pa24 = 0)) %>%
mutate(tot_pa24 = rowSums(across(c(A, B, C, D, E, F, `Data defic`))))
View(riv_type_18)
View(riv_type_24)
riv <- rivers %>%
left_join(pa18_riv, by = "fid_1") %>%
left_join(pa24_riv, by = "fid_1") %>%
# Drop geometry to work as a plain table
st_drop_geometry() %>%
mutate(leng = as.numeric(st_length(geometry))) %>%
rename(PES2024 = NBA2025_PE) %>% # fix name of PES 2024
# clean up non SA type and remove estuaries and foreign segments
filter(RIVTYPE != "Foreign" & PES2018 != "Foreign" & PES2024 != "Foreign" &
PES2018 != "Estuary" & PES2018 != "Estuary") %>%
# ensure consistency with Data defic segments
mutate(PES2018 = ifelse(PES2018 == "Data defic" & PES2024 != "Data defic", PES2024                          , PES2018))
