---
title: "Riv_EPL"
format: html
---

Preparation

```{r}
# Add packages: 
library(sf)
library(tidyverse)

# Add data
pa <- st_read("C:/Users/skownoa/Dropbox/NBAwork/NLC_change/NLC_Change.gdb", layer = "SANBI_PA_2024Q4_Mar2025") #ensure it uses proj =  wgs84 aea cm 25 -24 -33 
rivers <-st_read("C:/Users/skownoa/Dropbox/NBAwork/Rivers/NBA2025_rivers/NBA2025_River_20250610.shp") #ensure it uses proj =  wgs84 aea cm 25 -24 -33

# Data preparation:
# Subset PA data for 2018 and 2024 using DECL_YEAR, excluding properties degazetted using UNDECL_YEA. In preparation for this selection DECL_YEAR is set to 0 when unknown, and UNDCL_YEA is set to 9999 for those PAs that have never been degazetted.

# Create PA vectors for each time point
pa2018 <- subset(pa, DECL_YEAR <  2019 & UNDECL_YEA >2018)
pa2024 <- subset(pa, DECL_YEAR <  2025 & UNDECL_YEA >2024)
```

Analysis

```{r}
# Intersect PA with Rivers at each time point
pa18_riv <- st_intersection(rivers, pa2018)
pa18_riv <- pa18_riv %>%
  mutate(leng = st_length(geometry)) %>%
  st_drop_geometry() %>%
  group_by(fid_1) %>%
  summarise(leng_pa18 = sum((as.numeric(leng))))
  
pa24_riv <- st_intersection(rivers, pa2024)
pa24_riv <- pa24_riv %>%
  mutate(leng = st_length(geometry)) %>%
  st_drop_geometry() %>%
  group_by(fid_1) %>%
  summarise(leng_pa24 = sum((as.numeric(leng))))

# Join the PA length calculations to the Rivers data (using fid_1) and then group by River type and summarise by Condition class- clean up mismatched PES (Foreign, estuary and Data Defic)

riv <- rivers %>%
  left_join(pa18_riv, by = "fid_1") %>%
  left_join(pa24_riv, by = "fid_1") %>%
  mutate(leng = as.numeric(st_length(geometry))) %>%
  rename(PES2024 = NBA2025_PE) %>% # fix name of PES 2024
  # clean up non SA type and remove estuaries and foreign segments
  filter(RIVTYPE != "Foreign", PES2018 != "Foreign", PES2024 != "Foreign",
                     PES2018 != "Estuary",  PES2018 != "Estuary") %>%   
  # ensure consistency with Data defic segments  
  mutate(PES2018 = ifelse(PES2018 == "Data defic" & PES2024 != "Data defic", PES2024                          , PES2018)) %>%
  # Drop geometry to work as a plain table
  st_drop_geometry() 
  

## Note these data extend outside of SA and into estuaries - these segements need to be filtered out when doing computations. 

```

```{r}

#summarise by River type including segment length per type per condition class - this allows for inclusion of condition in the EPL formula
options(scipen = 999)

#overall summary
riv_type_18 <- riv %>%
    group_by(RIVTYPE, PES2018) %>%
  summarise(leng = sum(as.numeric(leng), na.rm = TRUE)) %>%
  ungroup() %>%
  pivot_wider(names_from = PES2018, values_from = leng, values_fill = list(leng = 0))  %>%
  mutate(tot_leng18 = rowSums(across(c(A, B, C, D, E, F, `Data defic`))))

riv_type_24 <- riv %>%
    group_by(RIVTYPE, PES2024) %>%
  summarise(leng = sum(as.numeric(leng), na.rm = TRUE)) %>%
  ungroup() %>%
  pivot_wider(names_from = PES2024, values_from = leng, values_fill = list(leng = 0))  %>%
  mutate(tot_leng24 = rowSums(across(c(A, B, C, D, E, F, `Data defic`))))

# PA summary 
 riv_type_pa18 <- riv %>%
  
  group_by(RIVTYPE, PES2018) %>%
  summarise(leng_pa18 = sum(as.numeric(leng_pa18), na.rm = TRUE)) %>%
  ungroup()  %>%
  pivot_wider(names_from = PES2018, values_from = leng_pa18,values_fill = list(leng_pa18 = 0))  %>%
  mutate(tot_pa18 = rowSums(across(c(A, B, C, D, E, F, `Data defic`))))

 riv_type_pa24 <- riv %>%
    group_by(RIVTYPE, PES2024) %>%
     summarise(leng_pa24 = sum(as.numeric(leng_pa24), na.rm = TRUE)) %>%
  ungroup() %>%
  pivot_wider(names_from = PES2024, values_from = leng_pa24, values_fill = list(leng_pa24 = 0)) %>%
  mutate(tot_pa24 = rowSums(across(c(A, B, C, D, E, F, `Data defic`))))
  
 
# Join the three tables above - this makes a single table in which all the required metric can be found to compute EPL and RLE
 
 riv_type_metrics <- riv_type_18 %>%
   select(RIVTYPE, tot_leng18) %>%
   left_join(riv_type_pa18, by = "RIVTYPE") %>%
   rename(A18=A, B18=B, C18=C, D18=D, E18=E, F18=F, DDef18 = `Data defic`) %>%
   left_join(riv_type_pa24, by = "RIVTYPE") %>%
   rename(DDef = `Data defic`) %>%
   left_join(riv, by = "RIVTYPE") %>%
   mutate(prp_pa18 = tot_pa18/tot_leng18) %>%
   mutate(prp_pa18_ab = (A18 + B18 + DDef18)/tot_leng18) %>%
   mutate(prp_pa18_model = (A18 + B18  + DDef18 + (0.5*C18) + (0.3*D18) + (0.3*E18) + (0.1*F18))/tot_leng18) %>%
   mutate(EPL18_all = case_when( prp_pa18 >= 0.2 ~ "WP", 
                                 prp_pa18 >= 0.1 ~ "MP",
                                 prp_pa18 >= 0.01 ~ "PP",
                                 TRUE ~ "NP")) %>% 
   mutate(EPL18_ab = case_when( prp_pa18_ab >= 0.2 ~ "WP", 
                                 prp_pa18_ab >= 0.1 ~ "MP",
                                 prp_pa18_ab >= 0.01 ~ "PP",
                                 TRUE ~ "NP")) %>% 
   mutate(EPL18_model = case_when( prp_pa18_model >= 0.2 ~ "WP", 
                                 prp_pa18_model >= 0.1 ~ "MP",
                                 prp_pa18_model >= 0.01 ~ "PP",
                                 TRUE ~ "NP")) %>%
   mutate(prp_pa24 = tot_pa24/tot_leng18) %>%
   mutate(prp_pa24_ab = (A + B + DDef)/tot_leng18) %>%
   mutate(prp_pa24_model = (A + B  + DDef + (0.5*C) + (0.3*D) + (0.3*E) + (0.1*F                                ))/tot_leng18) %>%
   mutate(EPL24_all = case_when( prp_pa24 >= 0.2 ~ "WP", 
                                 prp_pa24 >= 0.1 ~ "MP",
                                 prp_pa24 >= 0.01 ~ "PP",
                                 TRUE ~ "NP")) %>% 
   mutate(EPL24_ab = case_when( prp_pa24_ab >= 0.2 ~ "WP", 
                                 prp_pa24_ab >= 0.1 ~ "MP",
                                 prp_pa24_ab >= 0.01 ~ "PP",
                                 TRUE ~ "NP")) %>% 
   mutate(EPL24_model = case_when( prp_pa24_model >= 0.2 ~ "WP", 
                                 prp_pa24_model >= 0.1 ~ "MP",
                                 prp_pa24_model >= 0.01 ~ "PP",
                                 TRUE ~ "NP")) %>%
   # add in River Zones based on last letter of RIVTYPE
   
```

Summarise

```{r}
# make summary counts of EPL
 epl18_sum <- riv_type_metrics %>%
    group_by(EPL18_model) %>%
  summarise(count = n(),.groups = 'drop') %>%
  pivot_wider(names_from = EPL18_model, 
              values_from = count, values_fill = 0) %>%
  relocate(WP, .before = MP)%>%
  relocate(NP, .after = PP) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., T_BIOME = "Total", across(where(is.numeric), sum))) %>%
  # Add EPLindex
  mutate(EPLI = ((WP*3)+(MP*2)+(PP*1)+(NP*0))/((WP+MP+PP+NP)*3)) 
 
 epl24_sum <- riv_type_metrics %>%
    group_by(EPL24_model) %>%
  summarise(count = n(),.groups = 'drop') %>%
  pivot_wider(names_from = EPL24_model, 
              values_from = count, values_fill = 0) %>%
  relocate(WP, .before = MP)%>%
  relocate(NP, .after = PP) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., T_BIOME = "Total", across(where(is.numeric), sum))) %>%
  # Add EPLindex
  mutate(EPLI = ((WP*3)+(MP*2)+(PP*1)+(NP*0))/((WP+MP+PP+NP)*3)) 
 
```

#### **Make graphs for NBA**

```{r}

# load nbaR package : first run this in console devtools::install_github("SANBI-NBA/nbaR") 
library(nbaR)

# Use NBA package to make EPL graph (need high res output for booklet)
EPL <- riv_type_metrics %>%
    rename(`Well Protected` = WP, 
           `Moderately Protected` = MP, 
           `Poorly Protected` = PP, 
           `Not Protected` = NP ) # %>%
  # select(-...1) # required if importing from CSV
 
epl24_bar_plot <- nba_plot(EPL,
                  `T_BIOME`,
                  2:5,
                 CHRT = "bar",
                 NUM = TRUE,
                 LAB = "Percentage of ecosystem types",
                SAVE = NULL)

epl24_bar_plot

#export the graph
ggsave(
  filename = "outputs/epl24_bar_plot.jpeg", # File name
  plot = epl24_bar_plot,                   # Plot object
  device = "jpeg",                        # File format
  width = 16, height = 12, units = "cm",   # Dimensions
  dpi = 300                               # Resolution
)

#make a line plot of EPL Index using 2018 and 2014 timepoints - request Natasha to impve this or add to package.

biome_colors <- c(
  "Albany Thicket" = "darkgreen",
  "Azonal" = "blue",
  "Desert" =  "darkgrey",
  "Forest" =  "darkblue",
  "Fynbos"  =  "purple",
  "Grassland"  = "green3",
  "IOCB"  = "orange",
  "Nama-Karoo" = "brown1",
  "Savanna"  =  "brown",
  "Succulent Karoo"  = "yellow3",
  "Total" = "black"
)

EPLI <- epl2024inv_sum %>%
  select(T_BIOME, EPLI) %>% 
  rename(EPLI24 = EPLI) %>%
   left_join(epl2018inv_sum, by ="T_BIOME") %>%
   rename(EPLI18 = EPLI) %>%
   rename(Biome = T_BIOME) %>%
  select(Biome,EPLI18, EPLI24) %>%
  pivot_longer(cols = c(2,3), names_to = "Year", values_to = "EPLI") %>%
    mutate(Year = case_when(
    Year == "EPLI18" ~ "2018",
    Year == "EPLI24" ~ "2024",
    TRUE ~ Year
  ))
  
  epli_line_plot <- ggplot(EPLI, aes(x = Year, y = EPLI, group = Biome, color = Biome)) +
  scale_color_manual(values = biome_colors) + 
    geom_line(size = 1.2) +
  geom_point(size = 2) +
  theme_minimal() +
  labs(x = "Year", y = "EPLI") +
  scale_x_discrete(limits = c("2018", "2024"))
  
  epli_line_plot
  
  #export the graph
ggsave(
  filename = "outputs/epli_line_plot.jpeg", # File name
  plot = epli_line_plot,                   # Plot object
  device = "jpeg",                        # File format
  width = 16, height = 12, units = "cm",   # Dimensions
  dpi = 300                               # Resolution
)
```
