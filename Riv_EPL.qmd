---
title: "Riv_EPL"
format: html
---

Preparation

```{r}
# Add packages: 
library(sf)
library(tidyverse)

# Add data
pa <- st_read("C:/Users/skownoa/Dropbox/NBAwork/NLC_change/NLC_Change.gdb", layer = "SANBI_PA_2024Q4_Mar2025") #ensure it uses proj =  wgs84 aea cm 25 -24 -33 
rivers <-st_read("C:/Users/skownoa/Dropbox/NBAwork/Rivers/NBA2025_rivers/NBA2025_River_20250610.shp") #ensure it uses proj =  wgs84 aea cm 25 -24 -33

# Data preparation:
# Subset PA data for 2018 and 2024 using DECL_YEAR, excluding properties degazetted using UNDECL_YEA. In preparation for this selection DECL_YEAR is set to 0 when unknown, and UNDCL_YEA is set to 9999 for those PAs that have never been degazetted.

# Create PA vectors for each time point
pa2018 <- subset(pa, DECL_YEAR <  2019 & UNDECL_YEA >2018)
pa2024 <- subset(pa, DECL_YEAR <  2025 & UNDECL_YEA >2024)
```

Analysis

```{r}
# Intersect PA with Rivers at each time point
pa18_riv <- st_intersection(rivers, pa2018)
pa18_riv <- pa18_riv %>%
  mutate(leng = st_length(geometry)) %>%
  st_drop_geometry() %>%
  group_by(fid_1) %>%
  summarise(leng_pa18 = sum((as.numeric(leng))))
  
pa24_riv <- st_intersection(rivers, pa2024)
pa24_riv <- pa24_riv %>%
  mutate(leng = st_length(geometry)) %>%
  st_drop_geometry() %>%
  group_by(fid_1) %>%
  summarise(leng_pa24 = sum((as.numeric(leng))))

# Join the PA length calculations to the Rivers data (using fid_1) and then group by River type and summarise by Condition class- clean up mismatched PES (Foreign, estuary and Data Defic)

riv <- rivers %>%
  left_join(pa18_riv, by = "fid_1") %>%
  left_join(pa24_riv, by = "fid_1") %>%
  mutate(leng = as.numeric(st_length(geometry))) %>%
  rename(PES2024 = NBA2025_PE) %>% # fix name of PES 2024
  # clean up non SA type and remove estuaries and foreign segments
  filter(RIVTYPE != "Foreign", PES2018 != "Foreign", PES2024 != "Foreign",
                     PES2018 != "Estuary",  PES2018 != "Estuary") %>%   
  # ensure consistency with Data defic segments  
  mutate(PES2018 = ifelse(PES2018 == "Data defic" & PES2024 != "Data defic", PES2024                          , PES2018)) %>%
  # Drop geometry to work as a plain table
  st_drop_geometry() 
  

## Note these data extend outside of SA and into estuaries - these segements need to be filtered out when doing computations. 

```

```{r}

#summarise by River type including segment length per type per condition class - this allows for inclusion of condition in the EPL formula
options(scipen = 999)

#overall summary
riv_type_18 <- riv %>%
    group_by(RIVTYPE, PES2018) %>%
  summarise(leng = sum(as.numeric(leng), na.rm = TRUE)) %>%
  ungroup() %>%
  pivot_wider(names_from = PES2018, values_from = leng, values_fill = list(leng = 0))  %>%
  mutate(tot_leng18 = rowSums(across(c(A, B, C, D, E, F, `Data defic`))))

riv_type_24 <- riv %>%
    group_by(RIVTYPE, PES2024) %>%
  summarise(leng = sum(as.numeric(leng), na.rm = TRUE)) %>%
  ungroup() %>%
  pivot_wider(names_from = PES2024, values_from = leng, values_fill = list(leng = 0))  %>%
  mutate(tot_leng24 = rowSums(across(c(A, B, C, D, E, F, `Data defic`))))

# PA summary 
 riv_type_pa18 <- riv %>%
  
  group_by(RIVTYPE, PES2018) %>%
  summarise(leng_pa18 = sum(as.numeric(leng_pa18), na.rm = TRUE)) %>%
  ungroup()  %>%
  pivot_wider(names_from = PES2018, values_from = leng_pa18,values_fill = list(leng_pa18 = 0))  %>%
  mutate(tot_pa18 = rowSums(across(c(A, B, C, D, E, F, `Data defic`))))

 riv_type_pa24 <- riv %>%
    group_by(RIVTYPE, PES2024) %>%
     summarise(leng_pa24 = sum(as.numeric(leng_pa24), na.rm = TRUE)) %>%
  ungroup() %>%
  pivot_wider(names_from = PES2024, values_from = leng_pa24, values_fill = list(leng_pa24 = 0)) %>%
  mutate(tot_pa24 = rowSums(across(c(A, B, C, D, E, F, `Data defic`))))
  
 
# Join the three tables above - this makes a single table in which all the required metric can be found to compute EPL and RLE
 
 riv_type_metrics <- riv_type_18 %>%
   select(RIVTYPE, tot_leng18) %>%
   left_join(riv_type_pa18, by = "RIVTYPE") %>%
   rename(A18=A, B18=B, C18=C, D18=D, E18=E, F18=F, DDef18 = `Data defic`) %>%
   left_join(riv_type_pa24, by = "RIVTYPE") %>%
   rename(DDef = `Data defic`) %>%
   mutate(prp_pa18 = tot_pa18/tot_leng18) %>%
   mutate(prp_pa18_ab = (A18 + B18 + DDef18)/tot_leng18) %>%
   mutate(prp_pa18_model = (A18 + B18  + DDef18 + (0.3*(C18+D18)) + (0.1*(E18+F18)))/tot_leng18) %>%
   mutate(EPL18_all = case_when( prp_pa18 >= 0.3 ~ "WP", 
                                 prp_pa18 >= 0.15 ~ "MP",
                                 prp_pa18 >= 0.015 ~ "PP",
                                 TRUE ~ "NP")) %>% 
   mutate(EPL18_ab = case_when( prp_pa18_ab >= 0.3 ~ "WP", 
                                 prp_pa18_ab >= 0.15 ~ "MP",
                                 prp_pa18_ab >= 0.015 ~ "PP",
                                 TRUE ~ "NP")) %>% 
   mutate(EPL18_model = case_when( prp_pa18_model >= 0.3 ~ "WP", 
                                 prp_pa18_model >= 0.15 ~ "MP",
                                 prp_pa18_model >= 0.015 ~ "PP",
                                 TRUE ~ "NP")) %>%
  #this combines aquatic rule that WP must be ab with the model for repr for MP PP NP
   mutate(EPL18_wp_ab_model = case_when( prp_pa18_ab >= 0.3 ~ "WP", 
                                 prp_pa18_model >= 0.15 ~ "MP",
                                 prp_pa18_model >= 0.015 ~ "PP",
                                 TRUE ~ "NP")) %>%
   mutate(prp_pa24 = tot_pa24/tot_leng18) %>%
   mutate(prp_pa24_ab = (A + B + DDef)/tot_leng18) %>%
   mutate(prp_pa24_model = (A + B  + DDef + (0.3* (C+D)) + (0.1*(E+F)))/tot_leng18) %>%
   mutate(EPL24_all = case_when( prp_pa24 >= 0.3 ~ "WP", 
                                 prp_pa24 >= 0.15 ~ "MP",
                                 prp_pa24 >= 0.015 ~ "PP",
                                 TRUE ~ "NP")) %>% 
   mutate(EPL24_ab = case_when( prp_pa24_ab >= 0.3 ~ "WP", 
                                 prp_pa24_ab >= 0.15 ~ "MP",
                                 prp_pa24_ab >= 0.015 ~ "PP",
                                 TRUE ~ "NP")) %>% 
   mutate(EPL24_model = case_when( prp_pa24_model >= 0.3 ~ "WP", 
                                 prp_pa24_model >= 0.15 ~ "MP",
                                 prp_pa24_model >= 0.015 ~ "PP",
                                 TRUE ~ "NP")) %>%
 #this combines aquatic rule that WP must be ab with the model for repr for MP PP NP
   mutate(EPL24_wp_ab_model = case_when( prp_pa24_ab >= 0.3 ~ "WP", 
                                 prp_pa24_model >= 0.15 ~ "MP",
                                 prp_pa24_model >= 0.015 ~ "PP",
                                 TRUE ~ "NP")) %>%
     # add in River Zones based on last letter of RIVTYPE
   mutate(zone = case_when(str_ends(RIVTYPE, "U") ~ "Upper foothill",
                           str_ends(RIVTYPE, "L") ~ "Lower foothill", 
                           str_ends(RIVTYPE, "F") ~ "Lowland river", 
                           str_ends(RIVTYPE, "M") ~ "Mountain stream", 
                           TRUE ~  "other"))
   # export a csv of results - Condition and EPL per river type 2018 and 2024
   write.csv(riv_type_metrics, file = "outputs/epl_riv_metrics_per_type.csv")
```

Summarise

```{r}
# 2018 summaries f AB + MODEL approach 
# make summary counts of EPL categories per River Slopes Zones 
 epl18_sum <- riv_type_metrics %>%
    group_by(EPL18_wp_ab_model, zone) %>%
  summarise(count = n(),.groups = 'drop') %>%
  pivot_wider(names_from = EPL18_wp_ab_model, 
              values_from = count, values_fill = 0) %>%
  relocate(WP, .before = MP)%>%
  relocate(NP, .after = PP) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., zone = "Total", across(where(is.numeric), sum))) %>%
  # Add EPLindex
  mutate(EPLI = ((WP*3)+(MP*2)+(PP*1)+(NP*0))/((WP+MP+PP+NP)*3)) %>%
    mutate(zone = factor(zone, levels = c("Total", "Lowland river", "Lower foothill"           , "Upper foothill", "Mountain stream"))) %>% ## ggplot plots inverted factors!
   arrange(zone)
 
 # export a csv of results - COUNT of EPL 18 per slope zone
 write.csv(epl18_sum, file = "outputs/epl18_riv_sum_count.csv") 
 
  # make summary of extent of EPL
 epl18_sum_ext <- riv_type_metrics %>%
    group_by(EPL18_wp_ab_model, zone) %>%
  summarise(length = round(sum(tot_leng18)/1000, 0),.groups = 'drop') %>%
  pivot_wider(names_from = EPL18_wp_ab_model, 
              values_from = length, values_fill = 0) %>%
  relocate(WP, .before = MP)%>%
  relocate(NP, .after = PP) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., zone = "Total", across(where(is.numeric), sum))) %>%
    mutate(zone = factor(zone, levels = c("Total", "Lowland river", "Lower foothill"           , "Upper foothill", "Mountain stream"))) %>% ## ggplot plots inverted factors!
   arrange(zone)
 
 # export a csv of results - EXTENT (km) of EPL 18 per slope zone
  write.csv(epl18_sum_ext, file = "outputs/epl18_riv_sum_ext.csv")
  
 # Convert extent per epl category to proportion 
  epl18_sum_prpext <- epl18_sum_ext %>%
  filter(zone != "Total") %>%
  mutate(across(c(WP, MP, PP, NP), ~ round(.x / Total, 3))) %>%
  select(zone, WP, MP, PP, NP)
  
  # export a csv of results - PROPORTIONAL EXTENT  (km) of EPL 18 per slope zone
   write.csv(epl18_sum_prpext, file = "outputs/epl18_riv_sum_prp.csv")
 
  # 2024 summaries
  # make summary counts of EPL
  epl24_sum <- riv_type_metrics %>%
    group_by(EPL24_wp_ab_model, zone) %>%
  summarise(count = n(),.groups = 'drop') %>%
  pivot_wider(names_from = EPL24_wp_ab_model, 
              values_from = count, values_fill = 0) %>%
  relocate(WP, .before = MP)%>%
  relocate(NP, .after = PP) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., zone = "Total", across(where(is.numeric), sum))) %>%
  # Add EPLindex
  mutate(EPLI = ((WP*3)+(MP*2)+(PP*1)+(NP*0))/((WP+MP+PP+NP)*3)) %>%
    mutate(zone = factor(zone, levels = c("Total", "Lowland river", "Lower foothill"           , "Upper foothill", "Mountain stream"))) %>% ## ggplot plots inverted factors!
   arrange(zone)
  
 # export a csv of results - COUNT of EPL 18 per slope zone
 write.csv(epl24_sum, file = "outputs/epl24_riv_sum_count.csv") 
 
  # make summary of extent of EPL
 epl24_sum_ext <- riv_type_metrics %>%
    group_by(EPL24_wp_ab_model, zone) %>%
  summarise(length = round(sum(tot_leng18)/1000, 0),.groups = 'drop') %>%
  pivot_wider(names_from = EPL24_wp_ab_model, 
              values_from = length, values_fill = 0) %>%
  relocate(WP, .before = MP)%>%
  relocate(NP, .after = PP) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., zone = "Total", across(where(is.numeric), sum))) %>%
    mutate(zone = factor(zone, levels = c("Total", "Lowland river", "Lower foothill"           , "Upper foothill", "Mountain stream"))) %>% ## ggplot plots inverted factors!
   arrange(zone)
 
 # export a csv of results - EXTENT (km) of EPL 18 per slope zone
  write.csv(epl24_sum_ext, file = "outputs/epl24_riv_sum_ext.csv")
 
 epl24_sum_prpext <- epl24_sum_ext %>%
  filter(zone != "Total") %>%
  mutate(across(c(WP, MP, PP, NP), ~ round(.x / Total, 3))) %>%
  select(zone, WP, MP, PP, NP)
 
 # export a csv of results - PROPORTIONAL EXTENT  (km) of EPL 18 per slope zone
   write.csv(epl24_sum_prpext, file = "outputs/epl24_riv_sum_prp.csv")
```

#### **Make graphs for NBA**

```{r}

# load nbaR package : first run this in console devtools::install_github("SANBI-NBA/nbaR") 
library(nbaR)

# Use NBA package to make EPL graph (need high res output for booklet)
EPL24count <- epl24_sum %>%
    rename(`Well Protected` = WP, 
           `Moderately Protected` = MP, 
           `Poorly Protected` = PP, 
           `Not Protected` = NP ) # %>%
  # select(-...1) # required if importing from CSV
 
epl24_bar_plot_count <- nba_plot(EPL24count,
                  `zone`,
                  2:5,
                 CHRT = "bar",
                 NUM = TRUE,
                 LAB = "Percentage of ecosystem types",
                SAVE = NULL, 
                SCALE_TEXT = 0.6)

# adjust legend position
epl24_bar_plot_count <- epl24_bar_plot_count +
  theme(
    legend.position = "bottom",             # keep it at the bottom
    legend.margin = margin(l = -45, r = -5, t = -5, b = -5)) 

#export the graph
ggsave(
  filename = "outputs/epl24_riv_bar_plot_count.jpeg", # File name
  plot = epl24_bar_plot_count,                  # Plot object
  device = "jpeg",                        # File format
  width = 9, height = 7,  units = "cm",   # Dimensions
  dpi = 300                               # Resolution
)

# graphs for extent per slope zone per epl category

EPL24ext <- epl24_sum_ext %>%
    rename(`Well Protected` = WP, 
           `Moderately Protected` = MP, 
           `Poorly Protected` = PP, 
           `Not Protected` = NP ) # %>%
  # select(-...1) # required if importing from CSV
 
epl24_bar_plot_ext <- nba_plot(EPL24ext,
                  `zone`,
                  2:5,
                 CHRT = "bar",
                 NUM = FALSE,
                 LAB = "Percentage of ecosystem extent",
                SAVE = NULL, 
                SCALE_TEXT = 0.6)

# adjust legend position
epl24_bar_plot_ext <- epl24_bar_plot_ext +
  theme(
    legend.position = "bottom",             # keep it at the bottom
    legend.margin = margin(l = -45, r = -5, t = -5, b = -5)) 

#export the graph
ggsave(
  filename = "outputs/epl24_riv_bar_plot_ext.jpeg", # File name
  plot = epl24_bar_plot_ext,                   # Plot object
  device = "jpeg",                        # File format
  width = 9, height = 7, units = "cm",   # Dimensions
  dpi = 300                               # Resolution
)


# Make a line plot of EPL Index using 2018 and 2014 timepoints - request Natasha to impve this or add to package.

EPLI <- epl24_sum %>%
  select(zone, EPLI) %>% 
  rename(EPLI24 = EPLI) %>%
   left_join(epl18_sum, by ="zone") %>%
   rename(EPLI18 = EPLI) %>%
   rename(Zone = zone) %>%
  select(Zone,EPLI18, EPLI24) %>%
  pivot_longer(cols = c(2,3), names_to = "Year", values_to = "EPLI") %>%
    mutate(Year = case_when(
    Year == "EPLI18" ~ "2018",
    Year == "EPLI24" ~ "2024",
    TRUE ~ Year
  ))
  
  epli_line_plot <- ggplot(EPLI, aes(x = Year, y = EPLI, group = Zone)) +
  geom_line(aes(linetype = Zone, color = Zone), linewidth = 1.2) +
  geom_point(aes(color = Zone), size = 2) +
  theme_minimal() +
  labs(x = "Year", y = "EPLI") +
  scale_x_discrete(limits = c("2018", "2024")) +
  scale_color_manual(values = c(
    "Total" = "black",
    "Lowland river" = "blue",
    "Lower foothill" = "darkgreen",
    "Upper foothill" = "brown",
    "Mountain stream" = "orange"
  )) +
  coord_cartesian(ylim = c(0.1, 0.5)) +
    guides(color = guide_legend(reverse = TRUE),
         linetype = guide_legend(reverse = TRUE)) +
  theme(legend.title = element_blank())
  
  #export the graph
ggsave(
  filename = "outputs/epli_riv_line_plot.jpeg", # File name
  plot = epli_line_plot,                   # Plot object
  device = "jpeg",                        # File format
  width = 14, height = 9, units = "cm",   # Dimensions
  dpi = 300                               # Resolution
)
```
